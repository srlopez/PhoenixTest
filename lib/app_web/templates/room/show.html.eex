<h2>
  <%= String.capitalize(@room.name) %>
  <small class="lead"><%= @room.description %></small>
</h2>

<span><%= link "Edit", to: room_path(@conn, :edit, @room) %></span>
<span><%= link "Back", to: room_path(@conn, :index) %></span>


<div class="row">
  <div class="col-md-9">
    <label>Message</label>
    <div class="input-group" id="new-message">
      <input id="message-content" type="text" class="form-control" placeholder="Message for #<%= @room.name  %>" />
      <span class="input-group-btn">
       <button class="btn btn-default" type="button" onclick="console.log('')">Send</button>
     </span>
    </div>

    <ul id="messages">
      <%= for message <- @room.messages do %>
        <li>
          <b><%= message.name %></b>
          <br>
          <small><small><em><%= Regex.named_captures(~r/^.{11}(?<at>.{5}).*/, to_string(message.inserted_at))["at"]%></em>:</small></small>
            <%= message.body %>
        </li>
        <% end %>
    </ul>
  </div>

  <div class="col-md-3">
    <div class="panel panel-default">
      <div class="panel-heading">Online:</div>
      <div class="panel-body">
        <div id="online-users"></div>
      </div>
    </div>
  </div>
</div>

<script>
  window.onload = function() {
    let channel = getPhoenixSocket().channel("room:" + "<%= @room.id %>", {
      "custom_params": "not used"
    })
    let Presence = getPhoenixPresence();

    let presences = {};
    let messageInput = document.querySelector("#message-content")
    let messagesContainer = document.querySelector("#messages")
    let onlineUsers = document.querySelector("#online-users")

    const typingTimeout = 2000;
    var typingTimer;
    let userTyping = false;


    messageInput.addEventListener("keypress", event => {
      if (event.keyCode === 13) {
        setUserTyping(false);
        channel.push("message:add", {
          body: messageInput.value,
          name: "<%= @current_user.name %>",
          user_id: <%= @current_user.id %>,
          room_id: <%= @room.id %>
        })
        messageInput.value = ""
      }
    })

    channel.on("message:new", payload => {
      let messageItem = document.createElement("li")
      //messageItem.innerText = `${payload.name} [${Date()}] ${payload.body}`
      messageItem.innerHTML = `<b>${payload.name}</b>
      <br>
      <small><small><em>${Date()}</em>:</small></small>
        ${payload.body}`
      messagesContainer.insertBefore(messageItem, messagesContainer.childNodes[0]);
    })

    channel.on("presence_state", state => {
      presences = Presence.syncState(presences, state)
      renderOnlineUsers(presences)
    })

    channel.on("presence_diff", diff => {
      presences = Presence.syncDiff(presences, diff)
      renderOnlineUsers(presences)
    })

    const renderOnlineUsers = function(presences) {
      let onlineUsersMarkup = Presence.list(presences, (_id, {
        metas: [user, ...rest]
      }) => {
        var typingIndicator = ''
        //console.dir (user.typing)
        if (user.typing) {
          typingIndicator = ' <i>(typing...)</i>'
        }
        return `
          <div id="online-user-${user.user_id}">
            <strong class="text-secondary">${user.name}</strong> ${typingIndicator}
          </div>`
      }).join("")

      onlineUsers.innerHTML = onlineUsersMarkup;
    }


    messageInput.addEventListener("keydown", event => {
      setUserTyping(true);
      clearTimeout(typingTimer);
    })

    messageInput.addEventListener("keyup", event => {
      // Cada vez que levanta tecla es que teclea, reestablecemos el timer
      clearTimeout(typingTimer);
      typingTimer = setTimeout(setUserTyping(false), typingTimeout);
    })


    const setUserTyping = function(status) {
      if (userTyping == status) {
        return
      }
      userTyping = status

      channel.push('user:typing', {
        typing: status,
        name: "<%= @current_user.name %>",
      })
    }

    channel.join()
      .receive("ok", resp => {
        console.log("Joined successfully", resp)
      })
      .receive("error", resp => {
        console.log("Unable to join", resp)
      })

    // response = channel.push("ping", "Hello World!" )
    // console.log( response.payload )
  }
</script>
